{
  "Comment": "Send an email report of how the latest issue performed",
  "StartAt": "Get Last Issue",
  "States": {
    "Get Last Issue": {
      "Type": "Task",
      "Parameters": {
        "TableName": "${TableName}",
        "IndexName": "GSI1",
        "KeyConditionExpression": "#GSI1PK = :GSI1PK",
        "ExpressionAttributeNames": {
          "#GSI1PK": "GSI1PK"
        },
        "ExpressionAttributeValues": {
          ":GSI1PK": {
            "S.$": "States.Format('{}#newsletter', $$.Execution.Input.tenant.id)"
          }
        },
        "ScanIndexForward": false,
        "Limit": 1
      },
      "Resource": "${DynamodbQuery}",
      "Next": "Parallel"
    },
    "Parallel": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get Stats From DynamoDB",
          "States": {
            "Get Stats From DynamoDB": {
              "Type": "Task",
              "Resource": "${DynamodbGetItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Key": {
                  "pk": {
                    "S.$": "States.Format('{}#{}', $$.Execution.Input.tenant.id, $.Items[0].slug.S)"
                  },
                  "sk": {
                    "S": "stats"
                  }
                }
              },
              "ResultPath": "$.stats",
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Top Links",
          "States": {
            "Get Top Links": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${GetTopLinks}",
                "Payload": {
                  "campaign.$": "$.Items[0].pk.S",
                  "returnList": true
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Subscriber Count",
          "States": {
            "Get Subscriber Count": {
              "Type": "Task",
              "Resource": "${DynamodbGetItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Key": {
                  "pk": {
                    "S.$": "$$.Execution.Input.tenant.id"
                  },
                  "sk": {
                    "S": "tenant"
                  }
                }
              },
              "Next": "Set New Subscriber Count"
            },
            "Set New Subscriber Count": {
              "Type": "Task",
              "Resource": "${DynamodbPutItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Item": {
                  "pk": {
                    "S.$": "States.Format('{}#newsletter', $$.Execution.Input.tenant.id)"
                  },
                  "sk": {
                    "S.$": "States.Format('subscribers#{}', States.ArrayGetItem(States.StringSplit($$.Execution.StartTime, 'T'), 0))"
                  },
                  "count": {
                    "S.$": "$.Item.subscribers.N"
                  }
                }
              },
              "End": true,
              "ResultPath": null
            }
          }
        },
        {
          "StartAt": "Load Previous Subscriber Count",
          "States": {
            "Load Previous Subscriber Count": {
              "Type": "Task",
              "End": true,
              "Parameters": {
                "TableName": "${TableName}",
                "KeyConditionExpression": "#pk = :pk and begins_with(#sk, :sk)",
                "ExpressionAttributeNames": {
                  "#pk": "pk",
                  "#sk": "sk"
                },
                "ExpressionAttributeValues": {
                  ":pk": {
                    "S.$": "States.Format('{}#newsletter', $$.Execution.Input.tenant.id)"
                  },
                  ":sk": {
                    "S": "subscribers#"
                  }
                },
                "ScanIndexForward": false,
                "Limit": 1
              },
              "Resource": "${DynamodbQuery}"
            }
          }
        },
        {
          "StartAt": "Get Vote Results",
          "States": {
            "Get Vote Results": {
              "Type": "Task",
              "Resource": "${DynamodbGetItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Key": {
                  "pk": {
                    "S.$": "States.Format('{}#{}', $$.Execution.Input.tenant.id, $.Items[0].slug.S)"
                  },
                  "sk": {
                    "S": "votes"
                  }
                }
              },
              "End": true
            }
          }
        }
      ],
      "Next": "Build Email Report",
      "ResultPath": "$.data"
    },
    "Build Email Report": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "${BuildReportData}",
        "Payload": {
          "stats.$": "$.data[0].stats.Item",
          "issue.$": "$.Items[0].pk.S",
          "subscribers.$": "$.data[2].Item.subscribers.N",
          "priorSubscribers.$": "$.data[3].Items[0].count.S",
          "links.$": "$.data[1].links",
          "voteResults.$": "$.data[4].Item"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Update With Insights"
    },
    "Update With Insights": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "ResultPath": "$.updated",
      "Parameters": {
        "FunctionName": "${GetInsights}",
        "Payload": {
          "issue.$": "$.issue",
          "report.$": "$.html",
          "insightData.$": "$.insightData"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Send Update Email"
    },
    "Send Update Email": {
      "Type": "Task",
      "Resource": "${EventBridgePutEvents}",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "subject.$": "$.subject",
              "to": {
                "email.$": "$$.Execution.Input.tenant.email"
              },
              "html.$": "$.updated.Payload.html"
            },
            "DetailType": "Send Email v2",
            "Source": "newsletter-service"
          }
        ]
      },
      "End": true
    }
  }
}
