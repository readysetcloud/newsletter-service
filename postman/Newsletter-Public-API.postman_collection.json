{
  "info": {
    "name": "Newsletter Public API",
    "description": "Public API endpoints for newsletter subscription, voting, and tracking functionality.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "public_api_url",
      "value": "{{public_api_url}}",
      "type": "string"
    },
   {
      "key": "tenant_id",
      "value": "{{tenant_id}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Subscription Management",
      "description": "Newsletter subscription and unsubscription endpoints",
      "item": [
        {
          "name": "Add Subscriber",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}"
            },
            "url": {
              "raw": "{{public_api_url}}/{{tenant_id}}/subscribers",
              "host": ["{{public_api_url}}"],
              "path": ["{{tenant_id}}", "subscribers"]
            },
            "description": "Add a new subscriber to the newsletter for the specified tenant."
          },
          "response": []
        },
        {
          "name": "Add Subscriber - Validation Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has validation error message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"firstName\": \"\"\n}"
            },
            "url": {
              "raw": "{{public_api_url}}/{{tenant_id}}/subscribers",
              "host": ["{{public_api_url}}"],
              "path": ["{{tenant_id}}", "subscribers"]
            },
            "description": "Test validation errors when adding subscriber with invalid data."
          },
          "response": []
        },
        {
          "name": "Unsubscribe from Newsletter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is HTML content', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});",
                  "",
                  "pm.test('Response contains unsubscribe confirmation', function () {",
                  "    pm.expect(pm.response.text()).to.include('unsubscribe');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{public_api_url}}/{{tenant_id}}/unsubscribe?email={{hashed_email}}",
              "host": ["{{public_api_url}}"],
              "path": ["{{tenant_id}}", "unsubscribe"],
              "query": [
                {
                  "key": "email",
                  "value": "{{hashed_email}}",
                  "description": "Hashed email address for unsubscribe"
                }
              ]
            },
            "description": "Unsubscribe from newsletter using hashed email address."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Engagement & Voting",
      "description": "Newsletter engagement and voting functionality",
      "item": [
        {
          "name": "Submit Vote",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has vote results', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"choice\": \"option-a\"\n}"
            },
            "url": {
              "raw": "{{public_api_url}}/{{tenant_id}}/{{issue_slug}}/votes",
              "host": ["{{public_api_url}}"],
              "path": ["{{tenant_id}}", "{{issue_slug}}", "votes"]
            },
            "description": "Submit a vote for a specific newsletter issue."
          },
          "response": []
        },
        {
          "name": "Submit Vote - Invalid Choice",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has validation error message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"choice\": \"\"\n}"
            },
            "url": {
              "raw": "{{public_api_url}}/{{tenant_id}}/{{issue_slug}}/votes",
              "host": ["{{public_api_url}}"],
              "path": ["{{tenant_id}}", "{{issue_slug}}", "votes"]
            },
            "description": "Test validation error when submitting vote with invalid choice."
          },
          "response": []
        },
        {
          "name": "Submit Vote - Non-existent Issue",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has not found message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"choice\": \"option-a\"\n}"
            },
            "url": {
              "raw": "{{public_api_url}}/{{tenant_id}}/non-existent-issue/votes",
              "host": ["{{public_api_url}}"],
              "path": ["{{tenant_id}}", "non-existent-issue", "votes"]
            },
            "description": "Test 404 error when voting on non-existent issue."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Email Tracking",
      "description": "Email open tracking functionality",
      "item": [
        {
          "name": "Track Email Open",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Response has no content', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});",
                  "",
                  "pm.test('Response time is fast', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{public_api_url}}/{{tenant_id}}/{{issue_slug}}/opens",
              "host": ["{{public_api_url}}"],
              "path": ["{{tenant_id}}", "{{issue_slug}}", "opens"]
            },
            "description": "Track when an email is opened by the recipient."
          },
          "response": []
        },
        {
          "name": "Track Email Open - Non-existent Issue",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has not found message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{public_api_url}}/{{tenant_id}}/non-existent-issue/opens",
              "host": ["{{public_api_url}}"],
              "path": ["{{tenant_id}}", "non-existent-issue", "opens"]
            },
            "description": "Test 404 error when tracking opens for non-existent issue."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "description": "Test various error conditions for public API",
      "item": [
        {
          "name": "Invalid Tenant ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}"
            },
            "url": {
              "raw": "{{public_api_url}}/invalid-tenant-id/subscribers",
              "host": ["{{public_api_url}}"],
              "path": ["invalid-tenant-id", "subscribers"]
            },
            "description": "Test error handling with invalid tenant ID."
          },
          "response": []
        },
        {
          "name": "Malformed JSON Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"firstName\": \"John\"\n  // Missing comma and closing brace\n"
            },
            "url": {
              "raw": "{{public_api_url}}/{{tenant_id}}/subscribers",
              "host": ["{{public_api_url}}"],
              "path": ["{{tenant_id}}", "subscribers"]
            },
            "description": "Test error handling with malformed JSON request."
          },
          "response": []
        }
      ]
    }
  ]
}
