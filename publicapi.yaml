openapi: 3.0.0
info:
  title: Newsletter Public API
  description: |
    Public endpoints for content management
  version: 1.0.0

x-amazon-apigateway-request-validators:
  Validate All:
    validateRequestParameters: true
    validateRequestBody: true
x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates:
      application/json: '{ "message": "$context.error.validationErrorString" }'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin:
        Fn::Sub: "'${Origin}'"

tags:
  - name: Subscription
  - name: Tracking
  - name: Engagement
paths:
  /{tenant}/subscribers:
    parameters:
      - $ref: "#/components/parameters/Tenant"
    post:
      summary: Add a new subscriber
      tags:
        - Subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Subscriber"
      responses:
        201:
          $ref: "#/components/responses/Created"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/UnknownError"
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddSubscriberFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /{tenant}/unsubscribe:
    parameters:
      - $ref: "#/components/parameters/Tenant"
    get:
      summary: Unsubscribe from newsletter
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
          description: Hashed email address for unsubscribe
      tags:
        - Subscription
      responses:
        200:
          description: Unsubscribe confirmation page
          content:
            text/html:
              schema:
                type: string
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/UnknownError"
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UnsubscribeFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /{tenant}/{slug}/votes:
    parameters:
      - $ref: "#/components/parameters/Tenant"
      - $ref: "#/components/parameters/Slug"
    post:
      summary: Submit a vote
      tags:
        - Engagement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                choice:
                  type: string
                  description: Selection for the vote
              required: [choice]
      responses:
        200:
          description: The vote was submitted and results were returned
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/UnknownError"
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VoteFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

components:
  parameters:
    Tenant:
      name: tenant
      in: path
      required: true
      schema:
        type: string
      description: The tenant identifier
    Slug:
      name: slug
      in: path
      required: true
      schema:
        type: string
        description: Issue slug

  schemas:
    Subscriber:
      description: New subscriber details
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: Email address
          minLength: 4
        firstName:
          type: string
        lastName:
          type: string

  responses:
    Created:
      description: Successfully added into the system
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: Message resulting from a creation
                example: Contact created
    BadRequest:
      description: Unable to process request. Likely due to improperly formatted request.
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: Message detailing what went wrong
                example: The 'name' field is required and is missing.
    NotFound:
      description: The requested entity was not found
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: The requested entity was not found
                example: Vote not found
    UnknownError:
      description: An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: Unknown error message
                example: An unexpected error occurred.
