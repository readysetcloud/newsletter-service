AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Newsletter service powering Serverless Picks of the Week

Parameters:
  Environment:
    Type: String
    AllowedValues: [sandbox, stage, production]
  Origin:
    Type: String
    Default: "https://www.readysetcloud.io"
  EncryptionKey:
    Type: String
    Description: Used to hash email addresses

Metadata:
  esbuild-properties: &esbuild-properties
    Format: esm
    Minify: true
    OutExtension:
      - .js=.mjs
    Target: es2020
    Sourcemap: false
    EntryPoints:
      - index.mjs
    Banner:
      - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);
    External:
      - "@aws-sdk/*"
    Loader:
      - .hbs=text

Conditions:
  DeployProductionResources: !Equals [!Ref Environment, "production"]
  DeployStageResources:
    Fn::Not:
      - !Equals [!Ref Environment, "production"]

Globals:
  Function:
    Runtime: nodejs22.x
    CodeUri: functions
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 15
    MemorySize: 1024
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        SECRET_ID: "{{resolve:ssm:/readysetcloud/secrets}}"
  Api:
    Cors:
      AllowMethods: "'POST,OPTIONS'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'https://www.readysetcloud.io'"

Resources:
  NewsletterUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-admin-users"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: tenant_id
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: role
          AttributeDataType: String
          Required: false
          Mutable: true

  NewsletterUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref NewsletterUserPool
      ClientName: !Sub "${AWS::StackName}-admin-client"
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
        - http://localhost:3000/oauth2/idpresponse
      LogoutURLs:
        - http://localhost:3000/logout

  NewsletterIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-identity-pool"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref NewsletterUserPoolClient
          ProviderName: !GetAtt NewsletterUserPool.ProviderName

  # IAM roles for authenticated users
  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref NewsletterIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: CognitoAuthenticatedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${NewsletterApi}/*"

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref NewsletterIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn

  NewsletterApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: true
      StageName: public
      MethodSettings:
        - MetricsEnabled: True
          ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: ERROR
          DataTraceEnabled: True
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./publicapi.yaml

  DashboardApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: true
      StageName: api
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt NewsletterUserPool.Arn
      MethodSettings:
        - MetricsEnabled: True
          ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: ERROR
          DataTraceEnabled: True
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml

  NewsletterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  NewsletterBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: DeleteRule
            Status: Enabled
            ExpirationInDays: 7
      VersioningConfiguration:
        Status: Enabled

  HostingBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3600

  HostingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref HostingBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${HostingBucket}/*"

  # Lambda@Edge function for subdomain routing
  SubdomainRoutingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-subdomain-routing"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaEdgeRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = async (event) => {
            const request = event.Records[0].cf.request;
            const headers = request.headers;
            const host = headers.host[0].value;
            const uri = request.uri;

            // Extract subdomain (everything before the first dot)
            const hostParts = host.split('.');
            const subdomain = hostParts.length > 2 ? hostParts[0] : null;

            if (subdomain && subdomain !== 'www') {
              if (uri.startsWith('/api')) {
                // Route to Newsletter API with subdomain as tenant
                // Remove /api prefix and add tenant to path
                const newUri = `/$${subdomain}$${uri.substring(4)}`;
                request.uri = newUri;
                request.origin = {
                  custom: {
                    domainName: '${NewsletterApi}.execute-api.${AWS::Region}.amazonaws.com',
                    port: 443,
                    protocol: 'https',
    path: '/v1'
                  }
                };
              } else {
                // Route to S3 with subdomain as path prefix
                const newUri = `/$${subdomain}$${uri}`;
                request.uri = newUri;
                request.origin = {
                  s3: {
                    domainName: '${HostingBucket}.s3.${AWS::Region}.amazonaws.com',
                    region: '${AWS::Region}',
                    authMethod: 'none'
                  }
                };
              }
            } else {
              // Fallback to Dashboard API
              request.origin = {
                custom: {
                  domainName: '${DashboardApi}.execute-api.${AWS::Region}.amazonaws.com',
                  port: 443,
                  protocol: 'https',
                  path: '/api'
                }
              };
            }

            return request;
          };

  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SubdomainRoutingFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SubdomainRoutingFunction

  NewsletterDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub "${AWS::StackName} Newsletter Distribution"
        DefaultRootObject: index.html

        # Origins
        Origins:
          - Id: DashboardApiOrigin
            DomainName: !Sub "${DashboardApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /api
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
          - Id: NewsletterApiOrigin
            DomainName: !Sub "${NewsletterApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /v1
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
          - Id: HostingBucketOrigin
            DomainName: !Sub "${HostingBucket}.s3.${AWS::Region}.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: ""

        # Default behavior (fallback to Dashboard API)
        DefaultCacheBehavior:
          TargetOriginId: DashboardApiOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
    ForwardedValues:
            QueryString: true
            Headers:
              - Authorization
              - Content-Type
              - Accept
            Cookies:
              Forward: none
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref SubdomainRoutingFunctionVersion
          MinTTL: 0
          DefaultTTL: 0
          MaxTTL: 31536000

        # Cache behaviors for different content types
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: NewsletterApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
                - Content-Type
                - Accept
                - Host
              Cookies:
                Forward: none
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref SubdomainRoutingFunctionVersion
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 86400

          - PathPattern: "*.html"
            TargetOriginId: HostingBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: false
              Headers:
                - Host
              Cookies:
                Forward: none
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref SubdomainRoutingFunctionVersion
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000

          - PathPattern: "*.css"
            TargetOriginId: HostingBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: false
              Headers:
                - Host
              Cookies:
                Forward: none
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref SubdomainRoutingFunctionVersion
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000

          - PathPattern: "*.js"
TargetOriginId: HostingBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: false
              Headers:
                - Host
              Cookies:
                Forward: none
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref SubdomainRoutingFunctionVersion
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000

        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  ConfigurationSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      DeliveryOptions:
        TlsPolicy: REQUIRE
      ReputationOptions:
        ReputationMetricsEnabled: true
      SendingOptions:
        SendingEnabled: true

  ConfigurationSetDestination:
    Type: AWS::SES::ConfigurationSetEventDestination
    Properties:
      ConfigurationSetName: !Ref ConfigurationSet
      EventDestination:
        Enabled: true
        EventBridgeDestination:
          EventBusArn: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
        MatchingEventTypes:
          - SEND
          - REJECT
          - BOUNCE
          - COMPLAINT
          - DELIVERY

  ScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: newsletter

  SchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EventBridgeAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: events:PutEvents
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"

  AddTenantFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - add-update-tenant.mjs
    Properties:
      Handler: add-update-tenant.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt NewsletterTable.Arn
            - Effect: Allow
              Action: ses:CreateContactList
              Resource: "*"
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
      Events:
        CreationEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - rsc-core
              detail-type:
                - Add/Update Tenant

  AddSubscriberFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - subscribers/add-subscriber.mjs
    Properties:
      Handler: subscribers/add-subscriber.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: ses:CreateContact
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
          ORIGIN: !Ref Origin
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref NewsletterApi
            Path: /{tenant}/subscribers
            Method: POST
            Auth:
              Authorizer: NONE

  GetDashboardDataFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-dashboard-data.mjs
    Properties:
      Handler: get-dashboard-data.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
              Resource:
                - !GetAtt NewsletterTable.Arn
                - !Sub "${NewsletterTable.Arn}/index/GSI1"
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApi
            Path: /dashboard
            Method: GET

  ManageUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - admin/manage-user.mjs
    Properties:
      Handler: admin/manage-user.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminSetUserAttributes
              Resource: !GetAtt NewsletterUserPool.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref NewsletterUserPool
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref DashboardApi
            Path: /users
            Method: POST

  ImportSubscriberListFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - subscribers/import-subscriber-list.mjs
    Properties:
      Handler: subscribers/import-subscriber-list.handler
      Timeout: 900
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - ses:CreateContact
                - ses:ListContacts
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  ExportSubscribersFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - subscribers/export-subscribers.mjs
    Properties:
      Handler: subscribers/export-subscribers.handler
      Timeout: 300
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: ses:ListContacts
              Resource: "*"
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
            - Effect: Allow
              Action: s3:PutObject
              Resource: !Sub "${NewsletterBucket.Arn}/reports/*"
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
          BUCKET: !Ref NewsletterBucket

  HandleEmailStatusFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - handle-email-status.mjs
    Properties:
      Handler: handle-email-status.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:UpdateItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
      Events:
        CreationEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.ses
              detail-type:
                - Email Rejected
                - Email Sent
                - Email Delivered
                - Email Bounced
                - Email Complaint Received

  SetupVotingOptionsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - setup-voting-options.mjs
    Properties:
      Handler: setup-voting-options.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: bedrock:InvokeModel
              Resource: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.nova-pro-v1:0
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  VoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - vote.mjs
    Properties:
      Handler: vote.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
          ORIGIN: !Ref Origin
          EMAIL_ENCRYPTION_KEY: !Ref EncryptionKey
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref NewsletterApi
            Path: /{tenant}/{slug}/votes
            Method: POST
            Auth:
              Authorizer: NONE

  OpenTrackingFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - open-tracking.mjs
    Properties:
      Handler: open-tracking.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
          ORIGIN: !Ref Origin
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref NewsletterApi
            Path: /{tenant}/{slug}/opens
            Method: GET
            Auth:
              Authorizer: NONE

  UnsubscribeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - subscribers/unsubscribe.mjs
    Properties:
      Handler: subscribers/unsubscribe.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: ses:DeleteContact
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
          ORIGIN: !Ref Origin
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref NewsletterApi
            Path: /{tenant}/unsubscribe
            Method: GET
            Auth:
              Authorizer: NONE

  BuildReportDataFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - build-report-data.mjs
    Properties:
      Handler: build-report-data.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  GetInsightsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-insights.mjs
    Properties:
      Handler: get-insights.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}/index/GSI1
            - Effect: Allow
              Action: bedrock:InvokeModel
              Resource: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.nova-pro-v1:0
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  GetNextIssueDateFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-next-issue-date.mjs
    Properties:
      Handler: get-next-issue-date.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  StageIssueFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - stage-issue.mjs
    Properties:
      Handler: stage-issue.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  SendEmailV2Function:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - send-email-v2.mjs
    Properties:
      Handler: send-email-v2.handler
      Timeout: 900
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:ListContacts
              Resource: "*"
            - Effect: Allow
              Action: scheduler:CreateSchedule
              Resource: !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/newsletter/*"
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt SchedulerExecutionRole.Arn
      Environment:
        Variables:
          FROM_EMAIL: allen@readysetcloud.io
          SCHEDULER_ROLE_ARN: !GetAtt SchedulerExecutionRole.Arn
          EMAIL_ENCRYPTION_KEY: !Ref EncryptionKey
          CONFIGURATION_SET: !Ref ConfigurationSet
      Events:
        EmailEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - newsletter-service
              detail-type:
                - Send Email v2

  ParseIssueFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - parse-issue.mjs
    Properties:
      Handler: parse-issue.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/readysetcloud/secrets}}"
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          OWNER: "{{resolve:ssm:/readysetcloud/github-owner}}"
          REPO: "{{resolve:ssm:/readysetcloud/github-repo}}"
          TABLE_NAME: !Ref NewsletterTable

  SyncRepoDataFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - sync-repo-data.mjs
    Properties:
      Handler: sync-repo-data.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/readysetcloud/secrets}}"
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}/index/GSI1
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:DeleteItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
          OWNER: "{{resolve:ssm:/readysetcloud/github-owner}}"
          REPO: "{{resolve:ssm:/readysetcloud/github-repo}}"
      Events:
        AmplifyBuildSuccessful:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.amplify
              detail-type:
                - Amplify Deployment Status Change
              detail:
                appId:
                  - "{{resolve:ssm:/readysetcloud/amplify-app-id}}"
                jobStatus:
                  - SUCCEED

  ImportFromGitHubFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - import-issue-from-github.mjs
    Properties:
      Handler: import-issue-from-github.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/rsc/*
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref StageIssueStateMachine
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
          STATE_MACHINE_ARN: !Ref StageIssueStateMachine
          IS_PREVIEW: !If [DeployStageResources, true, false]
      Events:
        AmplifyBuildSuccessful:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Create Newsletter Issue
              detail:
                source:
                  - github

  ReportStatsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ReportIssueStats
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt ReportStatsStateMachine.Arn

  ReportStatsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/report-stats.asl.json
      DefinitionSubstitutions:
        DynamodbQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        DynamodbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        TableName: !Ref NewsletterTable
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        SendApiRequest: "{{resolve:ssm:/readysetcloud/send-api-request}}"
        GetTopLinks: !GetAtt GetTopLinkFunction.Arn
        BuildReportData: !GetAtt BuildReportDataFunction.Arn
        GetInsights: !GetAtt GetInsightsFunction.Arn
        DynamodbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        AdminEmail: "{{resolve:ssm:/readysetcloud/admin-email}}"

      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:GetItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}/index/GSI1
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - "{{resolve:ssm:/readysetcloud/send-api-request}}"
                - !GetAtt GetTopLinkFunction.Arn
                - !GetAtt BuildReportDataFunction.Arn
                - !GetAtt GetInsightsFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default

  SendAdCopyReminderStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/ad-copy-reminder.asl.json
      DefinitionSubstitutions:
        TableName: !Ref NewsletterTable
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        GetNextIssueDate: !GetAtt GetNextIssueDateFunction.Arn
        DynamodbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        AdminEmail: "{{resolve:ssm:/readysetcloud/admin-email}}"
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt GetNextIssueDateFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: "cron(0 15 ? * WED *)"

  StageIssueStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/stage-issue.asl.json
      DefinitionSubstitutions:
        DynamodbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        TableName: !Ref NewsletterTable
        DynamodbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        ParseIssue: !GetAtt ParseIssueFunction.Arn
        StageIssue: !GetAtt StageIssueFunction.Arn
        DynamodbUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        SendApiRequest: "{{resolve:ssm:/readysetcloud/send-api-request}}"
        SfnStartExecution: !Sub arn:${AWS::Partition}:states:::states:startExecution.sync:2
        GetMarkdownLinks: !GetAtt GetMarkdownLinksFunction.Arn
        UpdateLinksWithRedirects: !GetAtt UpdateLinksWithRedirectsFunction.Arn
        AddRedirectsStateMachine: !Ref AddRedirectStateMachine
        SchedulerCreateSchedule: !Sub arn:${AWS::Partition}:states:::aws-sdk:scheduler:createSchedule
        PublishTopContentStateMachine: !Ref PublishTopContentStateMachine
        PublishTopContentRole: !GetAtt PublishTopContentRole.Arn
        ReportStatsStateMachine: !Ref ReportStatsStateMachine
        ReportStatsRole: !GetAtt ReportStatsRole.Arn
        SetupVotingOptions: !GetAtt SetupVotingOptionsFunction.Arn
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !GetAtt NewsletterTable.Arn
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt StageIssueFunction.Arn
                - !GetAtt ParseIssueFunction.Arn
                - "{{resolve:ssm:/readysetcloud/send-api-request}}"
                - !GetAtt GetMarkdownLinksFunction.Arn
                - !GetAtt UpdateLinksWithRedirectsFunction.Arn
                - !GetAtt SetupVotingOptionsFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref AddRedirectStateMachine
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:StopExecution
              Resource: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution:${AddRedirectStateMachine.Name}:*
            - Effect: Allow
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
            - Effect: Allow
              Action: scheduler:CreateSchedule
              Resource:
                - !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/newsletter/NEWSLETTER-STATS*
                - !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/newsletter/ISSUE-STATS*
            - Effect: Allow
              Action: iam:PassRole
              Resource:
                - !GetAtt PublishTopContentRole.Arn
                - !GetAtt ReportStatsRole.Arn

  CalculateClicksStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/calculate-clicks.asl.json
      DefinitionSubstitutions:
        DynamoDbUpdate: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        TableName: !Ref NewsletterTable
        CloudWatchStartQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:cloudwatchlogs:startQuery
        LogGroupArn: !GetAtt RedirectLogGroup.Arn
        RedirectLogs: !Ref RedirectLogGroup
        HandleLogBatch: !GetAtt HandleLogBatchFunction.Arn
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: logs:StartQuery
              Resource: !GetAtt RedirectLogGroup.Arn
            - Effect: Allow
              Action: dynamodb:UpdateItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt HandleLogBatchFunction.Arn

  RedirectKeyValueStore:
    Type: AWS::CloudFront::KeyValueStore
    Properties:
      Name: newsletter-redirect

  AddRedirectStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3

  AddRedirectStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: state-machines/add-redirect.asl.json
      Tracing:
        Enabled: true
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt AddRedirectStateMachineLogGroup.Arn
      DefinitionSubstitutions:
        KvsArn: !GetAtt RedirectKeyValueStore.Arn
        DescribeKVS: !Sub arn:${AWS::Partition}:states:::aws-sdk:cloudfrontkeyvaluestore:describeKeyValueStore
        PutKey: !Sub arn:${AWS::Partition}:states:::aws-sdk:cloudfrontkeyvaluestore:putKey
        DdbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        TableName: !Ref NewsletterTable
        PutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: "*"
            - Effect: Allow
              Action:
                - cloudfront-keyvaluestore:DescribeKeyValueStore
                - cloudfront-keyvaluestore:PutKey
              Resource: !GetAtt RedirectKeyValueStore.Arn
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt NewsletterTable.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
      Type: EXPRESS
      Events:
        EventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Add Redirects

  RedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      FunctionCode: !Sub |
        import cf from 'cloudfront';

        const kvsId = '${RedirectKeyValueStore.Id}';
        const kvsHandle = cf.kvs(kvsId);

        async function handler(event) {
            const request = event.request;
            const pieces = request.uri.split('/');
            const key = pieces[pieces.length - 1];
            let foundRedirect = true;
            let value = "https://readysetcloud.io";
            try {
                value = await kvsHandle.get(key);
            } catch (err) {
                console.log("Kvs key lookup failed: " + key);
                foundRedirect = false;
            }

            const logData = { key: key, value: value };

            const queryString = buildQueryString(request.querystring);
            if('ref' in request.querystring){
              const refQuery = request.querystring['ref'];
              const refValue = refQuery.multiValue ?  refQuery.multiValue.map(function(q) { return q.value; }).join(',') : refQuery.value;
              logData.ref = refValue;
            }

            if(foundRedirect){
                console.log(JSON.stringify(logData));
            }
            value = value + (queryString ? "?" + queryString : '');

            const response = {
                statusCode: 302,
                statusDescription: 'Found',
                headers: { "location": { "value": value } }
            };

            return response;
        }

        function buildQueryString(querystring) {
            const params = [];

            for (const param in querystring) {
                const query = querystring[param];
                const multiValue = query.multiValue;

                if (multiValue) {
                    multiValue.forEach(function(item) {
                        params.push(param + "=" + encodeURIComponent(item.value));
                    });
                } else if (query.value === '') {
                    params.push(encodeURIComponent(param));
                } else {
                    params.push(param + "=" + encodeURIComponent(query.value));
                }
            }

            return params.join('&');
        }
      FunctionConfig:
        KeyValueStoreAssociations:
          - KeyValueStoreARN: !GetAtt RedirectKeyValueStore.Arn
        Runtime: cloudfront-js-2.0
        Comment: Function to return redirects
      Name: newsletter-redirect

  RedirectCFDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: DeployProductionResources
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - "GET"
            - "HEAD"
            - "OPTIONS"
          Compress: False
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RedirectFunction.FunctionMetadata.FunctionARN
          TargetOriginId: dummy.origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: True
        PriceClass: PriceClass_100
        Origins:
          - DomainName: dummy.origin
            Id: dummy.origin
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        ViewerCertificate:
          AcmCertificateArn: !Ref RedirectCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Aliases:
          - rdyset.click

  RedirectCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: DeployProductionResources
    Properties:
      DomainName: rdyset.click
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: rdyset.click
          HostedZoneId: Z09437152FAVHJ1MPFQYO

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Condition: DeployProductionResources
    Properties:
      HostedZoneId: Z09437152FAVHJ1MPFQYO
      Name: rdyset.click
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt RedirectCFDistribution.DomainName

  NonProdRedirectCFDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: DeployStageResources
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - "GET"
            - "HEAD"
            - "OPTIONS"
          Compress: False
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RedirectFunction.FunctionMetadata.FunctionARN
          TargetOriginId: dummy.origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: True
        PriceClass: PriceClass_100
        Origins:
          - DomainName: dummy.origin
            Id: dummy.origin
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer

  RedirectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
      LogGroupName: /aws/cloudfront/function/newsletter-redirect

  HandleLogBatchFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - handle-log-batch.mjs
    Properties:
      Handler: handle-log-batch.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:PutItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}
            - Effect: Allow
              Action: logs:GetQueryResults
              Resource: "*"
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  GetMarkdownLinksFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-markdown-links.mjs
    Properties:
      Handler: get-markdown-links.handler
      Policies:
        - AWSLambdaBasicExecutionRole

  UpdateLinksWithRedirectsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - update-links-with-redirects.mjs
    Properties:
      Handler: update-links-with-redirects.handler
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          REDIRECT_URL: https://rdyset.click

  GetTopLinkFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-top-link.mjs
    Properties:
      Handler: get-top-link.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}/index/GSI1
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  PublishTopContentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PublishTopContent
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt PublishTopContentStateMachine.Arn

  PublishTopContentStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: state-machines/publish-top-content.asl.json
      DefinitionSubstitutions:
        StepFunctionsStartExecution: !Sub arn:${AWS::Partition}:states:::states:startExecution.sync:2
        CalculateClicks: !GetAtt CalculateClicksStateMachine.Arn
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        GetTopLinks: !GetAtt GetTopLinkFunction.Arn
        PutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
      Policies:
        - Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt GetTopLinkFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: states:StartExecution
              Resource: !GetAtt CalculateClicksStateMachine.Arn
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:StopExecution
              Resource: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution:${CalculateClicksStateMachine.Name}:*
            - Effect: Allow
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule

  APIGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  APIGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayCloudWatchRole.Arn
Outputs:
  NewsletterApiUrl:
    Description: "API Gateway endpoint URL for Newsletter service"
    Value: !Sub "https://${NewsletterApi}.execute-api.${AWS::Region}.amazonaws.com/v1"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  UserPoolId:
    Description: "Cognito User Pool ID for admin authentication"
    Value: !Ref NewsletterUserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"

  UserPoolClientId:
    Description: "Cognito User Pool Client ID for admin authentication"
    Value: !Ref NewsletterUserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"

  CloudFrontDistributionUrl:
    Description: "CloudFront distribution URL for subdomain routing"
    Value: !Sub "https://${NewsletterDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontUrl"

  HostingBucketName:
    Description: "S3 bucket name for hosting static content"
    Value: !Ref HostingBucket
    Export:
      Name: !Sub "${AWS::StackName}-HostingBucket"

  IdentityPoolId:
    Description: "Cognito Identity Pool ID"
    Value: !Ref NewsletterIdentityPool
    Export:
      Name: !Sub "${AWS::StackName}-IdentityPoolId"

  Region:
    Description: "AWS Region"
    Value: !Ref AWS::Region
    Export:
      Name: !Sub "${AWS::StackName}-Region"
