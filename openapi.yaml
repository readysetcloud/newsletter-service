openapi: 3.0.0
info:
  title: Content Dashboard API
  description: |
    Used to manage content from the user interface
  version: 1.0.0

servers:
  - description: prod
    url: https://api.readysetcloud.io

x-amazon-apigateway-request-validators:
  Validate All:
    validateRequestParameters: true
    validateRequestBody: true
x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates:
      application/json: '{ "message": "$context.error.validationErrorString" }'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'https://www.readysetcloud.io'"

paths:
  /dashboard:
    get:
      summary: Dashboard
      responses:
        200:
          description: Load summary data for a dashboard
          content:
            application/json:
              schema:
                type: object
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/UnknownError"
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDashboardDataFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
      # security:
        # - CognitoUserPool: []

  /users:
    post:
      summary: Create an authorized user on the account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email address
                  minLength: 4
                firstName:
                  type: string
                lastName:
                  type: string
                role:
                  type: string
                temporaryPassword:
                  type: string
              required: [email, temporaryPassword]
      responses:
        201:
          $ref: "#/components/responses/Created"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/UnknownError"
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManageUserFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
      # security:
        # - CognitoUserPool: []

components:
  parameters:
    Tenant:
      name: tenant
      in: path
      required: true
      schema:
        type: string
      description: The tenant identifier
    Slug:
      name: slug
      in: path
      required: true
      schema:
        type: string
        description: Issue slug

  schemas:
    Subscriber:
      description: New subscriber details
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: Email address
          minLength: 4
        firstName:
          type: string
        lastName:
          type: string

  responses:
    Created:
      description: Successfully added into the system
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: Message resulting from a creation
                example: Contact created
    BadRequest:
      description: Unable to process request. Likely due to improperly formatted request.
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: Message detailing what went wrong
                example: The 'name' field is required and is missing.
    NotFound:
      description: The requested entity was not found
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: The requested entity was not found
                example: Vote not found
    UnknownError:
      description: An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: Unknown error message
                example: An unexpected error occurred.
  # securitySchemes:
  #   CognitoUserPool:
  #     type: apiKey
  #     name: Authorization
  #     in: header
  #     x-amazon-apigateway-authorizer:
  #       type: cognito_user_pools
  #       providerARNs:
  #         - Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${NewsletterUserPool}
