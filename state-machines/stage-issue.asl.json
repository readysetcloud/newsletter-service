{
  "Comment": "Stages an issue of the newsletter for publishing",
  "StartAt": "Get Existing Issue",
  "States": {
    "Get Existing Issue": {
      "Type": "Task",
      "Resource": "${DynamodbGetItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.key"
          },
          "sk": {
            "S": "newsletter"
          }
        }
      },
      "Next": "Has Issue Been Processed?",
      "ResultPath": "$.existingNewsletter"
    },
    "Has Issue Been Processed?": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.existingNewsletter.Item",
            "IsPresent": true
          },
          "Next": "Save Issue Record"
        },
        {
          "And": [
            {
              "Variable": "$.existingNewsletter.Item",
              "IsPresent": true
            },
            {
              "Variable": "$.existingNewsletter.Item.status.S",
              "StringEquals": "failed"
            }
          ],
          "Next": "Save Issue Record"
        }
      ],
      "Default": "Success - Duplicate Request"
    },
    "Save Issue Record": {
      "Type": "Task",
      "Resource": "${DynamodbPutItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Item": {
          "pk": {
            "S.$": "$$.Execution.Input.key"
          },
          "sk": {
            "S": "newsletter"
          },
          "status": {
            "S": "in progress"
          }
        }
      },
      "Next": "Is Scheduled In The Future And Not Preview?",
      "ResultPath": null
    },
    "Is Scheduled In The Future And Not Preview?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.futureDate",
              "IsPresent": true
            },
            {
              "Variable": "$.isPreview",
              "BooleanEquals": false
            }
          ],
          "Next": "Wait For Future Date"
        }
      ],
      "Default": "Setup Voting Options"
    },
    "Wait For Future Date": {
      "Type": "Wait",
      "TimestampPath": "$.futureDate",
      "Next": "Trigger Site Rebuild"
    },
    "Trigger Site Rebuild": {
      "Type": "Task",
      "Resource": "${EventBridgePutEvents}",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "reason": "Scheduled newsletter issue"
            },
            "DetailType": "Trigger Site Rebuild",
            "Source": "user.StageIssueStateMachine"
          }
        ]
      },
      "Next": "Setup Voting Options",
      "ResultPath": null
    },
    "Setup Voting Options": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${SetupVotingOptions}",
        "Payload": {
          "content.$": "$$.Execution.Input.content",
          "tenant.$": "$$.Execution.Input.tenant"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": null,
      "Next": "Build Web and Email Versions",
      "Assign": {
        "votingOptions.$": "$.Payload"
      }
    },
    "Build Web and Email Versions": {
      "Type": "Parallel",
      "Next": "Success?",
      "Branches": [
        {
          "StartAt": "Update Web Links",
          "States": {
            "Update Web Links": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "Parameters": {
                "Payload": {
                  "content.$": "$$.Execution.Input.content",
                  "tenantId.$": "$$.Execution.Input.tenant.id",
                  "issueId.$": "$$.Execution.Input.issueId"
                },
                "FunctionName": "${UpdateLinksWithTrackingData}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Transform and Callback",
              "OutputPath": "$.Payload"
            },
            "Transform and Callback": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "Parameters": {
                "Payload": {
                  "content.$": "$.content",
                  "isPreview.$": "$$.Execution.Input.isPreview",
                  "votingOptions.$": "$votingOptions"
                },
                "FunctionName": "${TransformAndCallback}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "OutputPath": "$.Payload",
              "End": true
            }
          }
        },
        {
          "StartAt": "Parse Markdown to Json",
          "States": {
            "Parse Markdown to Json": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "Parameters": {
                "FunctionName": "${ParseMdToJson}",
                "Payload": {
                  "content.$": "$.content",
                  "fileName.$": "$$.Execution.Input.fileName",
                  "isPreview.$": "$$.Execution.Input.isPreview",
                  "votingOptions.$": "$votingOptions"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "OutputPath": "$.Payload",
              "Next": "Send email preview?",
              "Assign": {
                "sendAtDate.$": "$.Payload.sendAtDate",
                "reportStatsDate.$": "$.Payload.reportStatsDate",
                "listCleanupDate.$": "$.Payload.listCleanupDate",
                "subject.$": "$.Payload.subject"
              }
            },
            "Send email preview?": {
              "Type": "Choice",
              "Choices": [
                {
                  "And": [
                    {
                      "Variable": "$$.Execution.Input.isPreview",
                      "IsPresent": true
                    },
                    {
                      "Variable": "$$.Execution.Input.isPreview",
                      "BooleanEquals": true
                    }
                  ],
                  "Next": "Send Preview"
                }
              ],
              "Default": "Publish"
            },
            "Send Preview": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "Parameters": {
                "FunctionName": "${PublishIssue}",
                "Payload": {
                  "data.$": "$.data",
                  "subject.$": "$.subject",
                  "email.$": "$$.Execution.Input.tenant.email",
                  "isPreview": true,
                  "tenantId.$": "$.Execution.Input.tenant.id"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "OutputPath": "$.Payload",
              "End": true
            },
            "Publish": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "Parameters": {
                "Payload": {
                  "data.$": "$.data",
                  "sendAtDate.$": "$sendAtDate",
                  "subject.$": "$.subject",
                  "tenantId.$": "$$.Execution.Input.tenant.id"
                },
                "FunctionName": "${PublishIssue}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "OutputPath": "$.Payload",
              "Next": "Schedule Tasks and Update"
            },
            "Schedule Tasks and Update": {
              "Type": "Parallel",
              "ResultPath": null,
              "Branches": [
                {
                  "StartAt": "Schedule Issue Report",
                  "States": {
                    "Schedule Issue Report": {
                      "Type": "Task",
                      "Parameters": {
                        "ActionAfterCompletion": "DELETE",
                        "FlexibleTimeWindow": {
                          "Mode": "OFF"
                        },
                        "GroupName": "newsletter",
                        "Name.$": "States.Format('ISSUE-STATS-{}', $$.Execution.Input.issueId)",
                        "ScheduleExpression.$": "States.Format('at({})', $reportStatsDate)",
                        "Target": {
                          "Arn": "${ReportStatsStateMachine}",
                          "RoleArn": "${ReportStatsRole}",
                          "Input": {
                            "tenant.$": "$$.Execution.Input.tenant"
                          }
                        }
                      },
                      "Resource": "${SchedulerCreateSchedule}",
                      "ResultPath": null,
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Format List Cleanup Input",
                  "States": {
                    "Format List Cleanup Input": {
                      "Type": "Pass",
                      "Parameters": {
                        "tenantId.$": "$$.Execution.Input.tenant",
                        "currentIssue.$": "States.Format('{}#{}', $$.Execution.Input.tenant.id, $$.Execution.Input.issueId)",
                        "previousIssue.$": "States.Format('{}#{}', $$.Execution.Input.tenant.id, States.MathAdd($$.Execution.Input.issueId, -1))"
                      },
                      "ResultPath": "$.cleanup",
                      "Next": "Schedule List Cleanup"
                    },
                    "Schedule List Cleanup": {
                      "Type": "Task",
                      "End": true,
                      "Parameters": {
                        "ActionAfterCompletion": "DELETE",
                        "FlexibleTimeWindow": {
                          "Mode": "OFF"
                        },
                        "GroupName": "newsletter",
                        "Name.$": "States.Format('{}-CLEAN-{}', $$.Execution.Input.tenant.id, $$.Execution.Input.issueId)",
                        "ScheduleExpression.$": "States.Format('at({})', $listCleanupDate)",
                        "Target": {
                          "Arn": "arn:aws:scheduler:::aws-sdk:eventbridge:putEvents",
                          "RoleArn": "${CleanupListRole}",
                          "Input": {
                            "Entries": [
                              {
                                "Source": "newsletter-service",
                                "DetailType": "Clean Bounced Subscribers",
                                "Detail.$": "States.JsonToString($.cleanup)"
                              }
                            ]
                          }
                        }
                      },
                      "Resource": "${SchedulerCreateSchedule}",
                      "ResultPath": null
                    }
                  }
                },
                {
                  "StartAt": "Update Issue Metadata",
                  "States": {
                    "Update Issue Metadata": {
                      "Type": "Task",
                      "Resource": "${DynamodbUpdateItem}",
                      "Parameters": {
                        "TableName": "${TableName}",
                        "Key": {
                          "pk": {
                            "S.$": "$$.Execution.Input.key"
                          },
                          "sk": {
                            "S": "newsletter"
                          }
                        },
                        "UpdateExpression": "SET #GSIPK = :GSIPK, #GSISK = :GSISK, #subject = :subject",
                        "ExpressionAttributeNames": {
                          "#GSIPK": "GSI1PK",
                          "#GSISK": "GSI1SK",
                          "#subject": "subject"
                        },
                        "ExpressionAttributeValues": {
                          ":GSIPK": {
                            "S.$": "States.Format('{}#newsletter', $$.Execution.Input.tenant.id)"
                          },
                          ":GSISK": {
                            "S.$": "$sendAtDate"
                          },
                          ":subject": {
                            "S.$": "$subject"
                          }
                        }
                      },
                      "ResultPath": null,
                      "End": true
                    }
                  }
                }
              ],
              "End": true
            }
          }
        }
      ]
    },
    "Success?": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Update Issue Record - Success",
          "And": [
            {
              "Variable": "$[0].success",
              "BooleanEquals": true
            },
            {
              "Variable": "$[1].success",
              "BooleanEquals": true
            }
          ]
        }
      ],
      "Default": "Update Issue Record - Failure"
    },
    "Update Issue Record - Failure": {
      "Type": "Task",
      "Resource": "${DynamodbUpdateItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.key"
          },
          "sk": {
            "S": "newsletter"
          }
        },
        "UpdateExpression": "SET #status = :status",
        "ExpressionAttributeNames": {
          "#status": "status"
        },
        "ExpressionAttributeValues": {
          ":status": {
            "S": "failed"
          }
        }
      },
      "ResultPath": null,
      "Next": "Fail"
    },
    "Fail": {
      "Type": "Fail"
    },
    "Update Issue Record - Success": {
      "Type": "Task",
      "Resource": "${DynamodbUpdateItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.key"
          },
          "sk": {
            "S": "newsletter"
          }
        },
        "UpdateExpression": "SET #status = :status",
        "ExpressionAttributeNames": {
          "#status": "status"
        },
        "ExpressionAttributeValues": {
          ":status": {
            "S": "succeeded"
          }
        }
      },
      "ResultPath": null,
      "Next": "Notify of Success"
    },
    "Notify of Success": {
      "Type": "Task",
      "Resource": "${EventBridgePutEvents}",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "to": {
                "email.$": "$$.Execution.Input.tenant.email"
              },
              "subject.$": "States.Format('[Scheduled] Newsletter Issue {}', $$.Execution.Input.issueId)",
              "html": "<p>The newsletter was successfully scheduled for sending. Good luck!</p>",
              "tenantId.$": "$.Execution.Input.tenant.id"
            },
            "DetailType": "Send Email v2",
            "Source": "newsletter-service"
          }
        ]
      },
      "Next": "Success",
      "ResultPath": null
    },
    "Success": {
      "Type": "Succeed"
    },
    "Success - Duplicate Request": {
      "Type": "Succeed",
      "Comment": "This issue has already been processed"
    }
  }
}
