{
  "Comment": "Stages an issue of the newsletter for publishing",
  "StartAt": "Get Existing Issue",
  "States": {
    "Get Existing Issue": {
      "Type": "Task",
      "Resource": "${DynamodbGetItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.key"
          },
          "sk": {
            "S": "newsletter"
          }
        }
      },
      "Next": "Has Issue Been Processed?",
      "ResultPath": "$.existingNewsletter"
    },
    "Has Issue Been Processed?": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.existingNewsletter.Item",
            "IsPresent": true
          },
          "Next": "Save Issue Record"
        },
        {
          "And": [
            {
              "Variable": "$.existingNewsletter.Item",
              "IsPresent": true
            },
            {
              "Variable": "$.existingNewsletter.Item.status.S",
              "StringEquals": "failed"
            }
          ],
          "Next": "Save Issue Record"
        }
      ],
      "Default": "Success - Duplicate Request"
    },
    "Save Issue Record": {
      "Type": "Task",
      "Resource": "${DynamodbPutItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Item": {
          "pk": {
            "S.$": "$$.Execution.Input.key"
          },
          "sk": {
            "S": "newsletter"
          },
          "status": {
            "S": "in progress"
          }
        }
      },
      "Next": "Is Scheduled In The Future And Not Preview?",
      "ResultPath": null
    },
    "Is Scheduled In The Future And Not Preview?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.futureDate",
              "IsPresent": true
            },
            {
              "Variable": "$.isPreview",
              "BooleanEquals": false
            }
          ],
          "Next": "Wait For Future Date"
        }
      ],
      "Default": "Get Links From Content"
    },
    "Wait For Future Date": {
      "Type": "Wait",
      "TimestampPath": "$.futureDate",
      "Next": "Trigger Site Rebuild"
    },
    "Trigger Site Rebuild": {
      "Type": "Task",
      "Resource": "${EventBridgePutEvents}",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "reason": "Scheduled newsletter issue"
            },
            "DetailType": "Trigger Site Rebuild",
            "Source": "user.StageIssueStateMachine"
          }
        ]
      },
      "Next": "Get Links From Content",
      "ResultPath": null
    },
    "Get Links From Content": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "Payload": {
          "content.$": "$$.Execution.Input.content"
        },
        "FunctionName": "${GetMarkdownLinks}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Create Redirects",
      "ResultPath": "$.links"
    },
    "Create Redirects": {
      "Type": "Task",
      "Resource": "${SfnStartExecution}",
      "Parameters": {
        "StateMachineArn": "${AddRedirectsStateMachine}",
        "Input": {
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
          "links.$": "$.links.Payload.links",
          "campaign.$": "$$.Execution.Input.key"
        }
      },
      "ResultPath": "$.redirects",
      "Next": "Setup Voting Options"
    },
    "Setup Voting Options": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${SetupVotingOptions}",
        "Payload": {
          "content.$": "$$.Execution.Input.content",
          "tenant.$": "$$.Execution.Input.tenant"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": "$.votingOptions",
      "Next": "Update Content"
    },
    "Update Content": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${UpdateLinksWithRedirects}",
        "Payload": {
          "redirects.$": "$.redirects.Output.redirects",
          "content.$": "$$.Execution.Input.content"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": "$.updatedContent",
      "Next": "Parse Issue"
    },
    "Parse Issue": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${ParseIssue}",
        "Payload": {
          "content.$": "$.updatedContent.Payload.content",
          "fileName.$": "$$.Execution.Input.fileName",
          "isPreview.$": "$$.Execution.Input.isPreview",
          "votingOptions.$": "$.votingOptions.Payload"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Update Issue Record - Failure"
        }
      ],
      "OutputPath": "$.Payload",
      "Next": "Is Preview?"
    },
    "Is Preview?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$$.Execution.Input.isPreview",
              "IsPresent": true
            },
            {
              "Variable": "$$.Execution.Input.isPreview",
              "BooleanEquals": true
            }
          ],
          "Next": "Send Preview"
        }
      ],
      "Default": "Stage Newsletter"
    },
    "Send Preview": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${StageIssue}",
        "Payload": {
          "data.$": "$.data",
          "subject.$": "$.subject",
          "email.$": "$$.Execution.Input.tenant.email",
          "isPreview": true
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Update Issue Record - Failure"
        }
      ],
      "ResultPath": null,
      "Next": "Update Issue Record - Previewed"
    },
    "Update Issue Record - Previewed": {
      "Type": "Task",
      "Resource": "${DynamoDbUpdateItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.key"
          },
          "sk": {
            "S": "newsletter"
          }
        },
        "UpdateExpression": "SET #status = :status",
        "ExpressionAttributeNames": {
          "#status": "status"
        },
        "ExpressionAttributeValues": {
          ":status": {
            "S": "failed"
          }
        }
      },
      "End": true,
      "ResultPath": null
    },
    "Stage Newsletter": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${StageIssue}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Update Issue Record - Success",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Update Issue Record - Failure"
        }
      ],
      "ResultPath": null
    },
    "Update Issue Record - Failure": {
      "Type": "Task",
      "Resource": "${DynamoDbUpdateItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.key"
          },
          "sk": {
            "S": "newsletter"
          }
        },
        "UpdateExpression": "SET #status = :status",
        "ExpressionAttributeNames": {
          "#status": "status"
        },
        "ExpressionAttributeValues": {
          ":status": {
            "S": "failed"
          }
        }
      },
      "End": true,
      "ResultPath": null
    },
    "Update Issue Record - Success": {
      "Type": "Task",
      "Resource": "${DynamoDbUpdateItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.key"
          },
          "sk": {
            "S": "newsletter"
          }
        },
        "UpdateExpression": "SET #status = :status, #GSIPK = :GSIPK, #GSISK = :GSISK, #slug = :slug",
        "ExpressionAttributeNames": {
          "#status": "status",
          "#GSIPK": "GSI1PK",
          "#GSISK": "GSI1SK",
          "#slug": "slug"
        },
        "ExpressionAttributeValues": {
          ":status": { "S": "succeeded" },
          ":GSIPK": { "S.$": "States.Format('{}#newsletter', $$.Execution.Input.tenant.id)" },
          ":GSISK": { "S.$": "$.sendAtDate" },
          ":slug": { "S.$": "States.Format('{}', $.data.metadata.number)"}
        }
      },
      "ResultPath": null,
      "Next": "Schedule Reports"
    },
    "Schedule Reports": {
      "Type": "Parallel",
      "Next": "Notify of Success",
      "ResultPath": null,
      "Branches": [
        {
          "StartAt": "Schedule Top Stats",
          "States": {
            "Schedule Top Stats": {
              "Type": "Task",
              "End": true,
              "Parameters": {
                "ActionAfterCompletion": "DELETE",
                "FlexibleTimeWindow": {
                  "Mode": "OFF"
                },
                "GroupName": "newsletter",
                "Name.$": "States.Format('NEWSLETTER-STATS-{}', $.data.metadata.number)",
                "ScheduleExpression.$": "States.Format('at({})', $.getTopStatsDate)",
                "Target": {
                  "Arn": "${PublishTopContentStateMachine}",
                  "RoleArn": "${PublishTopContentRole}",
                  "Input": {
                    "campaign.$": "$$.Execution.Input.key"
                  }
                }
              },
              "Resource": "${SchedulerCreateSchedule}",
              "ResultPath": null
            }
          }
        },
        {
          "StartAt": "Schedule Issue Report",
          "States": {
            "Schedule Issue Report": {
              "Type": "Task",
              "End": true,
              "Parameters": {
                "ActionAfterCompletion": "DELETE",
                "FlexibleTimeWindow": {
                  "Mode": "OFF"
                },
                "GroupName": "newsletter",
                "Name.$": "States.Format('ISSUE-STATS-{}', $.data.metadata.number)",
                "ScheduleExpression.$": "States.Format('at({})', $.reportStatsDate)",
                "Target": {
                  "Arn": "${ReportStatsStateMachine}",
                  "RoleArn": "${ReportStatsRole}",
                  "Input": {
                    "tenant.$": "$$.Execution.Input.tenant"
                  }
                }
              },
              "Resource": "${SchedulerCreateSchedule}",
              "ResultPath": null
            }
          }
        }
      ]
    },
    "Notify of Success": {
      "Type": "Task",
      "Resource": "${EventBridgePutEvents}",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "to": {
                "email.$": "$$.Execution.Input.tenant.email"
              } ,
              "subject.$": "States.Format('[Scheduled] {}', $.subject)",
              "html.$": "States.Format('<p>The newsletter was successfully scheduled for sending at {}. Good luck!</p>', $.sendAtDate)"
            },
            "DetailType": "Send Email v2",
            "Source": "user.StageNewsletterStateMachine"
          }
        ]
      },
      "Next": "Success",
      "ResultPath": null
    },
    "Success": {
      "Type": "Succeed"
    },
    "Success - Duplicate Request": {
      "Type": "Succeed",
      "Comment": "This issue has already been processed"
    }
  }
}
