AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Newsletter service powering Serverless Picks of the Week

Parameters:
  SendGridDistributionListId:
    Type: String
  SendGridSenderId:
    Type: String
    Default: '4700440'
  SendGridTemplateId:
    Type: String
    Default: d-b231d6ee5c2346e489b0cceb9a430582
  SendGridTemplateVersionId:
    Type: String
    Default: cca59fb9-1507-4f2a-8df0-0b52b403a128
  Environment:
    Type: String
    AllowedValues: [ sandbox, stage, production ]
  Origin:
    Type: String
    Default: 'https://www.readysetcloud.io'

Metadata:
  esbuild-properties: &esbuild-properties
    Format: esm
    Minify: true
    OutExtension:
      - .js=.mjs
    Target: es2020
    Sourcemap: false
    EntryPoints:
      - index.mjs
    Banner:
      - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);
    External:
      - '@aws-sdk/*'

Conditions:
  DeployProductionResources:
    !Equals [!Ref Environment, 'production']
  DeployStageResources:
    Fn::Not:
      - !Equals [!Ref Environment, 'production']

Globals:
  Function:
    Runtime: nodejs20.x
    CodeUri: functions
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 15
    MemorySize: 1024
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        SECRET_ID: "{{resolve:ssm:/readysetcloud/secrets}}"
  Api:
    Cors:
      AllowMethods: "'POST,OPTIONS'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'https://www.readysetcloud.io'"

Resources:
  NewsletterApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: true
      StageName: v1
      MethodSettings:
        - MetricsEnabled: True
          ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: ERROR
          DataTraceEnabled: True
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml

  NewsletterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  ScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: newsletter

  AddTenantFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - add-update-tenant.mjs
    Properties:
      Handler: add-update-tenant.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
      Events:
        CreationEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - rsc-core
              detail-type:
                - Add/Update Tenant

  AddSubscriberFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - add-subscriber.mjs
    Properties:
      Handler: add-subscriber.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/readysetcloud/secrets}}"
      Environment:
        Variables:
          LIST_ID: !Ref SendGridDistributionListId
          ORIGIN: !Ref Origin
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref NewsletterApi
            Path: /subscribers
            Method: POST

  SetupVotingOptionsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - setup-voting-options.mjs
    Properties:
      Handler: setup-voting-options.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: bedrock:InvokeModel
              Resource: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.nova-pro-v1:0
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  VoteFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - vote.mjs
    Properties:
      Handler: vote.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
          ORIGIN: !Ref Origin
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref NewsletterApi
            Path: /{tenant}/{slug}/votes
            Method: POST

  BuildReportEmailFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - build-report-email.mjs
    Properties:
      Handler: build-report-email.handler
      Policies:
        - AWSLambdaBasicExecutionRole

  GetNextIssueDateFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-next-issue-date.mjs
    Properties:
      Handler: get-next-issue-date.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  StageIssueFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - stage-issue.mjs
    Properties:
      Handler: stage-issue.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/readysetcloud/secrets}}"
      Environment:
        Variables:
          LIST_ID: !Ref SendGridDistributionListId
          SENDER_ID: !Ref SendGridSenderId
          TEMPLATE_ID: !Ref SendGridTemplateId
          VERSION_ID: !Ref SendGridTemplateVersionId

  ParseIssueFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - parse-issue.mjs
    Properties:
      Handler: parse-issue.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/readysetcloud/secrets}}"
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          OWNER: '{{resolve:ssm:/readysetcloud/github-owner}}'
          REPO: '{{resolve:ssm:/readysetcloud/github-repo}}'
          TABLE_NAME: !Ref NewsletterTable

  SyncRepoDataFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - sync-repo-data.mjs
    Properties:
      Handler: sync-repo-data.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/readysetcloud/secrets}}"
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}/index/GSI1
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:DeleteItem
              Resource: !GetAtt NewsletterTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
          OWNER: '{{resolve:ssm:/readysetcloud/github-owner}}'
          REPO: '{{resolve:ssm:/readysetcloud/github-repo}}'
      Events:
        AmplifyBuildSuccessful:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.amplify
              detail-type:
                - Amplify Deployment Status Change
              detail:
                appId:
                  - '{{resolve:ssm:/readysetcloud/amplify-app-id}}'
                jobStatus:
                  - SUCCEED

  ImportFromGitHubFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - import-issue-from-github.mjs
    Properties:
      Handler: import-issue-from-github.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/rsc/*
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref StageIssueStateMachine
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable
          STATE_MACHINE_ARN: !Ref StageIssueStateMachine
          IS_PREVIEW: !If [DeployStageResources, true, false]
      Events:
        AmplifyBuildSuccessful:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Create Newsletter Issue
              detail:
                source:
                  - github

  ReportStatsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ReportIssueStats
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt ReportStatsStateMachine.Arn

  ReportStatsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/report-stats.asl.json
      DefinitionSubstitutions:
        DynamodbQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        TableName: !Ref NewsletterTable
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        SendApiRequest: "{{resolve:ssm:/readysetcloud/send-api-request}}"
        GetTopLinks: !GetAtt GetTopLinkFunction.Arn
        BuildReportEmail: !GetAtt BuildReportEmailFunction.Arn
        DynamodbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        AdminEmail: '{{resolve:ssm:/readysetcloud/admin-email}}'
        ListId: !Ref SendGridDistributionListId
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:putItem
                - dynamodb:query
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}
            - Effect: Allow
              Action: dynamodb:query
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}/index/GSI1
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - "{{resolve:ssm:/readysetcloud/send-api-request}}"
                - !GetAtt GetTopLinkFunction.Arn
                - !GetAtt BuildReportEmailFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default

  SendAdCopyReminderStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/ad-copy-reminder.asl.json
      DefinitionSubstitutions:
        TableName: !Ref NewsletterTable
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        GetNextIssueDate: !GetAtt GetNextIssueDateFunction.Arn
        DynamodbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        AdminEmail: '{{resolve:ssm:/readysetcloud/admin-email}}'
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt NewsletterTable.Arn
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt GetNextIssueDateFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: "cron(0 15 ? * WED *)"

  StageIssueStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/stage-issue.asl.json
      DefinitionSubstitutions:
        DynamodbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        TableName: !Ref NewsletterTable
        DynamodbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        ParseIssue: !GetAtt ParseIssueFunction.Arn
        StageIssue: !GetAtt StageIssueFunction.Arn
        DynamoDbUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        SendApiRequest: "{{resolve:ssm:/readysetcloud/send-api-request}}"
        SfnStartExecution: !Sub arn:${AWS::Partition}:states:::states:startExecution.sync:2
        GetMarkdownLinks: !GetAtt GetMarkdownLinksFunction.Arn
        UpdateLinksWithRedirects: !GetAtt UpdateLinksWithRedirectsFunction.Arn
        AddRedirectsStateMachine: !Ref AddRedirectStateMachine
        SchedulerCreateSchedule: !Sub arn:${AWS::Partition}:states:::aws-sdk:scheduler:createSchedule
        PublishTopContentStateMachine: !Ref PublishTopContentStateMachine
        PublishTopContentRole: !GetAtt PublishTopContentRole.Arn
        ReportStatsStateMachine: !Ref ReportStatsStateMachine
        ReportStatsRole: !GetAtt ReportStatsRole.Arn
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !GetAtt NewsletterTable.Arn
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt StageIssueFunction.Arn
                - !GetAtt ParseIssueFunction.Arn
                - "{{resolve:ssm:/readysetcloud/send-api-request}}"
                - !GetAtt GetMarkdownLinksFunction.Arn
                - !GetAtt UpdateLinksWithRedirectsFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref AddRedirectStateMachine
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:StopExecution
              Resource: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution:${AddRedirectStateMachine.Name}:*
            - Effect: Allow
              Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
            - Effect: Allow
              Action: scheduler:CreateSchedule
              Resource:
                - !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/newsletter/NEWSLETTER-STATS*
                - !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/newsletter/ISSUE-STATS*
            - Effect: Allow
              Action: iam:PassRole
              Resource:
                - !GetAtt PublishTopContentRole.Arn
                - !GetAtt ReportStatsRole.Arn

  CalculateClicksStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/calculate-clicks.asl.json
      DefinitionSubstitutions:
        DynamoDbUpdate: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        TableName: !Ref NewsletterTable
        CloudWatchStartQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:cloudwatchlogs:startQuery
        CloudWatchGetQueryResults: !Sub arn:${AWS::Partition}:states:::aws-sdk:cloudwatchlogs:getQueryResults
        LogGroupArn: !GetAtt RedirectLogGroup.Arn
        RedirectLogs: !Ref RedirectLogGroup
        HandleLogBatch: !GetAtt HandleLogBatchFunction.Arn
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: logs:StartQuery
              Resource: !GetAtt RedirectLogGroup.Arn
            - Effect: Allow
              Action: logs:GetQueryResults
              Resource: "*"
            - Effect: Allow
              Action: dynamodb:UpdateItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt HandleLogBatchFunction.Arn

  RedirectKeyValueStore:
    Type: AWS::CloudFront::KeyValueStore
    Properties:
      Name: newsletter-redirect

  AddRedirectStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3

  AddRedirectStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: state-machines/add-redirect.asl.json
      Tracing:
        Enabled: true
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt AddRedirectStateMachineLogGroup.Arn
      DefinitionSubstitutions:
        KvsArn: !GetAtt RedirectKeyValueStore.Arn
        DescribeKVS: !Sub arn:${AWS::Partition}:states:::aws-sdk:cloudfrontkeyvaluestore:describeKeyValueStore
        PutKey: !Sub arn:${AWS::Partition}:states:::aws-sdk:cloudfrontkeyvaluestore:putKey
        DdbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        TableName: !Ref NewsletterTable
        PutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: "*"
            - Effect: Allow
              Action:
                - cloudfront-keyvaluestore:DescribeKeyValueStore
                - cloudfront-keyvaluestore:PutKey
              Resource: !GetAtt RedirectKeyValueStore.Arn
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt NewsletterTable.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
      Type: EXPRESS
      Events:
        EventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Add Redirects

  RedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      FunctionCode: !Sub |
        import cf from 'cloudfront';

        const kvsId = '${RedirectKeyValueStore.Id}';
        const kvsHandle = cf.kvs(kvsId);

        async function handler(event) {
            const request = event.request;
            const headers = request.headers;
            const pieces = request.uri.split('/');
            const key = pieces[pieces.length - 1];
            let value = "https://readysetcloud.io";
            try {
                value = await kvsHandle.get(key);
                console.log(JSON.stringify({key, value}));
            } catch (err) {
                console.log(`Kvs key lookup failed: ` + key);
            }

            const response = {
                statusCode: 302,
                statusDescription: 'Found',
                headers:
                    { "location": { "value": value } }
                }

            return response;

        }
      FunctionConfig:
        KeyValueStoreAssociations:
          - KeyValueStoreARN: !GetAtt RedirectKeyValueStore.Arn
        Runtime: cloudfront-js-2.0
        Comment: Function to return redirects
      Name: newsletter-redirect

  RedirectCFDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: DeployProductionResources
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - "GET"
            - "HEAD"
            - "OPTIONS"
          Compress: False
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RedirectFunction.FunctionMetadata.FunctionARN
          TargetOriginId: dummy.origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: True
        PriceClass: PriceClass_100
        Origins:
          - DomainName: dummy.origin
            Id: dummy.origin
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        ViewerCertificate:
          AcmCertificateArn: !Ref RedirectCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Aliases:
          - rdyset.click

  RedirectCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: DeployProductionResources
    Properties:
      DomainName: rdyset.click
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: rdyset.click
          HostedZoneId: Z09437152FAVHJ1MPFQYO

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Condition: DeployProductionResources
    Properties:
      HostedZoneId: Z09437152FAVHJ1MPFQYO
      Name: rdyset.click
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt RedirectCFDistribution.DomainName

  NonProdRedirectCFDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: DeployStageResources
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - "GET"
            - "HEAD"
            - "OPTIONS"
          Compress: False
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RedirectFunction.FunctionMetadata.FunctionARN
          TargetOriginId: dummy.origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: True
        PriceClass: PriceClass_100
        Origins:
          - DomainName: dummy.origin
            Id: dummy.origin
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer

  RedirectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
      LogGroupName: /aws/cloudfront/function/newsletter-redirect

  HandleLogBatchFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - handle-log-batch.mjs
    Properties:
      Handler: handle-log-batch.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:updateItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  GetMarkdownLinksFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-markdown-links.mjs
    Properties:
      Handler: get-markdown-links.handler
      Policies:
        - AWSLambdaBasicExecutionRole

  UpdateLinksWithRedirectsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - update-links-with-redirects.mjs
    Properties:
      Handler: update-links-with-redirects.handler
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          REDIRECT_URL: https://rdyset.click

  GetTopLinkFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-top-link.mjs
    Properties:
      Handler: get-top-link.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NewsletterTable}/index/GSI1
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsletterTable

  PublishTopContentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PublishTopContent
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt PublishTopContentStateMachine.Arn

  PublishTopContentStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: state-machines/publish-top-content.asl.json
      DefinitionSubstitutions:
        StepFunctionsStartExecution: !Sub arn:${AWS::Partition}:states:::states:startExecution.sync:2
        CalculateClicks: !GetAtt CalculateClicksStateMachine.Arn
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        GetTopLinks: !GetAtt GetTopLinkFunction.Arn
        PutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
      Policies:
        - Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt GetTopLinkFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: states:StartExecution
              Resource: !GetAtt CalculateClicksStateMachine.Arn
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:StopExecution
              Resource: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution:${CalculateClicksStateMachine.Name}:*
            - Effect: Allow
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule

  APIGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  APIGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayCloudWatchRole.Arn
